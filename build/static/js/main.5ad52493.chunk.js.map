{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","CARDS","initialState","results","showModal","correct","showOk","showBad","goodPoints","badPoints","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","checkAnswer","index","numbers","split","tmp1","parseInt","tmp2","setState","number","_this2","_this$state","setTimeout","_this3","_this$state2","react_default","a","createElement","className","map","card","key","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5ad52493.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nconst CARDS = [\n  '6x7',\n  '7x8',\n  '8x8',\n  '3x8',\n  '4x8',\n  '5x8',\n  '2x8',\n  '5x8',\n  '2x9',\n  '3x9',\n  '4x9',\n  '7x6',\n  '3x7',\n  '5x7',\n  '4x7',\n];\n\nconst initialState = {\n  results: [],\n  showModal: false,\n  correct: null,\n  showOk: false,\n  showBad: false,\n  goodPoints: 0,\n  badPoints: 0,\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n    this.showModal = this.showModal.bind(this);\n    this.checkAnswer = this.checkAnswer.bind(this);\n  }\n  showModal(index) {\n    const numbers = CARDS[index].split('x');\n    const correct = numbers[0] * numbers[1];\n    const tmp1 = correct + parseInt(Math.random(1) * 20 + 1);\n    const tmp2 = correct + parseInt(Math.random(1) * 20 + 1);\n    this.setState({\n      showModal: true,\n      results: shuffle([correct , tmp1, tmp2]),\n      correct,\n    })\n  }\n  checkAnswer(number) {\n    const { correct, goodPoints, badPoints } = this.state;\n    if (correct === number) {\n      this.setState({\n        showOk: true,\n        showModal: false,\n        goodPoints: goodPoints + 1,\n      });\n      setTimeout(() => {\n        this.setState({\n          showOk: false,\n        });\n      }, 1500);\n    } else {\n      this.setState({\n        showBad: true,\n        showModal: false,\n        badPoints: badPoints + 1,\n      });\n      setTimeout(() => {\n        this.setState({\n          showBad: false,\n        });\n      }, 1500);\n    }\n  }\n  render() {\n    const { results, showModal, showOk, showBad, goodPoints, badPoints } = this.state;\n    return (\n      <div className=\"App\">\n        {CARDS.map((card, index) => {\n          const numbers = card.split('x');\n          return (\n            <div key={index} className=\"card\" onClick={() => this.showModal(index)}>\n              <div className=\"top-left\">{numbers[0]}</div>\n              <div className=\"middle\">X</div>\n              <div className=\"bottom-right\">{numbers[1]}</div>\n            </div>\n          );\n        })}\n        {showModal && <div className=\"modal\">\n          {results.map((number) => {\n            return (\n              <div onClick={() => this.checkAnswer(number)}>{number}</div>\n            );\n          })}\n        </div>}\n        {showOk && <div className=\"ok\">DOBRZE</div>}\n        {showBad && <div className=\"bad\">ŹLE</div>}\n        <div className=\"points\">\n          <div className=\"good-points\">DOBRZE: <span>{goodPoints}</span></div>\n          <div className=\"bad-points\">ŹLE: <span>{badPoints}</span></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}